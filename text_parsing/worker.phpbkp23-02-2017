<?php
error_reporting(E_ALL);

$do_not_use_client_logic = false;

require_once(__DIR__ . "/config.php");
require_once(__DIR__ . "/Hook.php");
require_once(__DIR__ . "/models/DB.php");
require_once(__DIR__ . "/models/Model.php");
require_once(__DIR__ . "/models/Client.php");
require_once(__DIR__ . "/models/CompanyBranch.php");
require_once(__DIR__ . "/models/_ErrorLog.php");

/* Other files */
require_once(__DIR__ . "/models/Counter.php");
require_once(__DIR__ . "/models/EntryCounter.php");
require_once(__DIR__ . "/models/Container.php");
require_once(__DIR__ . "/models/TransactionDetails/DepositCanceled.php");
require_once(__DIR__ . "/models/TransactionDetails/InventoryLoadCancelled.php");
require_once(__DIR__ . "/models/TransactionCategory.php");
require_once(__DIR__ . "/models/ProcessingFile.php");  // OK
require_once(__DIR__ . "/models/Station.php");  // OK
require_once(__DIR__ . "/models/AvailableMessages.php");
// require_once(__DIR__."/models/ManagerSetup.php");
// require_once(__DIR__."/models/TellerSetup.php");
require_once(__DIR__ . "/models/Msg.php");

require_once(__DIR__ . "/models/TransactionType.php");  // OK
require_once(__DIR__ . "/models/TransactionDetails.php");
require_once(__DIR__ . "/models/BillType.php");  // OK
require_once(__DIR__ . "/models/CurrentTellerTransaction.php");  // OK
require_once(__DIR__ . "/models/Manager.php");  // OK
require_once(__DIR__ . "/models/Side.php"); // OK

require_once(__DIR__ . "/models/VaultBuy.php");
require_once(__DIR__ . "/models/VBActivityReport.php");
require_once(__DIR__ . "/models/HistoryReport.php");
require_once(__DIR__ . "/models/SideActivityReport.php");
require_once(__DIR__ . "/models/Message.php");
require_once(__DIR__ . "/models/UserReport.php");
require_once(__DIR__ . "/models/TellerActivity.php");
require_once(__DIR__ . "/models/NetCasheUsage.php");
require_once(__DIR__ . "/models/Inventory.php");
require_once(__DIR__ . "/models/CoinInventory.php");
require_once(__DIR__ . "/models/AutomixSettings.php");
require_once(__DIR__ . "/models/VerificationRequired.php");

require_once(__DIR__ . "/models/ActivityReport.php");  // OK
require_once(__DIR__ . "/models/BillActivityReport.php");  // OK
require_once(__DIR__ . "/models/BillHistory.php");  // OK

require_once(__DIR__ . "/models/TransactionDetails/InventoryRemoval.php");
require_once(__DIR__ . "/models/TransactionDetails/OnlineDeposit.php");
require_once(__DIR__ . "/models/TransactionDetails/AutoAuditBillCount.php");
require_once(__DIR__ . "/models/TransactionDetails/ReplenishedCassettes.php");
require_once(__DIR__ . "/models/TransactionDetails/ReconciledRejects.php");
require_once(__DIR__ . "/models/TransactionDetails/CassetteAdjustment.php");

require_once(__DIR__ . "/models/Setup/Teller.php");
require_once(__DIR__ . "/models/Setup/Manager.php");
require_once(__DIR__ . "/models/Setup/NetworkCtrl.php");

require_once(__DIR__ . "/models/Ticket.php");
require_once(__DIR__ . "/models/MachineError.php");
require_once(__DIR__ . "/models/SendEmail.php");
require_once(__DIR__ . "/PHPMailer/PHPMailerAutoload.php");
require_once(__DIR__ . "/models/ErrorDetail.php");
require_once(__DIR__ . "/models/ErrorTicket.php");
require_once(__DIR__ . "/models/TicketConfig.php");

require_once(__DIR__ . "/models/DynAssign_Session_Status.php");

class Worker
{
    protected $debug = false;
    protected $branch_info = 0;
    protected $path = "";
    public $machineError = array();

    public function __construct()
    {
     
//        $this->debug = true;
        $this->path = dirname(__DIR__) . DIRECTORY_SEPARATOR;
    }

    public function run(CompanyBranch $dir = null)
    {
        $this->dir = is_null($dir->ftp_path) ? "storage" : $dir->ftp_path;
        $this->dir = str_replace('//', DIRECTORY_SEPARATOR, $this->path . $this->dir);
        
        //CHECK FOR COMPANY BRANCH AND IF FTP EXIST THEN PROCESS FILE
        if (!is_dir($this->dir)) {
            return false;
        }
        //SET COMPANY ID
        $this->branch_info = $dir;
        $this->loadLibrary();

        $this->init();
        
        $this->out("\nTry do something ...", 1);
        if ($this->checkQueue()) {
            $this->processQueue();
        }
    }

    protected function loadLibrary()
    {
        
    }

    protected function init()
    {
        MachineError::init();
        SendEmail::init();
        register_shutdown_function(array($this, 'fatalErrorShutdownHandler'));
        //header("Content-Type: text/plain");
    }

    protected function checkQueue()
    {
     
        $this->queueDir = "{$this->dir}/queue";
        $this->errorDir = "{$this->dir}/error_occured";
        $this->warehouseDir = "{$this->dir}/warehouse";
        $this->processingDir = "{$this->dir}/processing";

        if (!is_dir($this->queueDir)) {
            mkdir($this->queueDir, 755);
        }
        if (!is_dir($this->errorDir)) {
            mkdir($this->errorDir, 755);
        }
        if (!is_dir($this->warehouseDir)) {
            mkdir($this->warehouseDir, 755);
        }
        if (!is_dir($this->processingDir)) {
            mkdir($this->processingDir, 755);
        }

        $this->files = glob("{$this->queueDir}/*.txt");

        if (empty($this->files))
            return false;

        $count = count($this->files);

        $this->out("Found $count files in queue!", 1);
        
        return true;
    }

    protected function processQueue()
    {
        while (count($this->files)) {
            
            $this->processFile(array_shift($this->files));
        }
    }

    protected function idle()
    {
     
        die("\n\nDone!\n");
        // sleep(3);
    }

    public function fatalErrorShutdownHandler()
    {
        $last_error = error_get_last();

        if (!empty($this->fileObject))
            $this->fileObject = null;

        if (empty($this->file))
            return;

        if ($this->debug)
            rename($this->file, str_replace("{$this->processingDir}/", "{$this->queueDir}/", $this->file));
        else
            rename($this->file, str_replace("{$this->processingDir}/", "{$this->errorDir}/", $this->file));

        DB::rollBackTransaction();

        $err = new _ErrorLog();
        $err->error_message = implode(" ", array($last_error['message'], "in file",
            $last_error['file'], "at line",
            $last_error['line']));
        $err->file = $this->file;
        $err->created_date = date("Y-m-d H:i:s");
        $err->save();

        if ($last_error['type'] === E_ERROR)
            $this->error(implode("\n", array("Error Message: " . $last_error['message'], "File: " . $last_error['file'], "Line: " . $last_error['line'])));
    }

    protected function out($msg, $lvl = 4)
    {
        echo "$msg\n";
    }

    protected function error($msg, $lvl = 4)
    {
        echo "Error: $msg\n";
    }

    protected function processFile($file)
    {
        if (!file_exists($file))
            $this->error("File $file doesn't exist!");

        $this->file = $file;

        $this->out("####################");
        $this->out("# Processing file {$this->file}");

        $matches = array();
	$regex = "/([A-Za-z0-9]+)[\(\_\[](([0-9]+)([\-\_][A-Za-z0-9-||A-Za-z0-9 ]+){1,2})[\)\_\]]([0-9]+).txt$/";
	if (!preg_match_all($regex, $this->file, $matches)) {
            $this->error("Wrong file name {$this->file}");
            return;
//            throw new Exception("{$this->file}", 1);
        }
        $filename = array_shift($matches[0]);
        $company = array_shift($matches[1]);
        $station = array_shift($matches[3]);
        //$num = array_shift($matches[4]);
        $machine = array_shift($matches[4]);
        $date = array_shift($matches[5]);

        // is file ready
        if (!is_file_ready($this->file))
            return;

        if (!DB::beginTransaction())
            return $this->error("PDO error! can not begin transaction!");

        // Try find this file in db by name
        // $currentLine = ProcessingFile::getCountForFile($filename);
        // Processing file move to processing folder
        if (!rename($this->file, str_replace("{$this->queueDir}/", "{$this->processingDir}/", $this->file)))
            $this->error("Unable to move file {$this->file}");

        $this->file = str_replace("{$this->queueDir}/", "{$this->processingDir}/", $this->file);

        // Open file
        $this->fileObject = new SplFileObject($this->file);
        
        // File instance
        $processing_file = ProcessingFile::init($filename,$this->branch_info->id,$this->branch_info->company_id);
        if (empty($processing_file->row_number)) {
            $processing_file->filename = $filename;
            $processing_file->company_id = $this->branch_info->company_id;
            $processing_file->branch_id = $this->branch_info->id;
            $processing_file->station = $station;
            $processing_file->file_date = DateTime::createFromFormat("mdY", $date) ? DateTime::createFromFormat("mdY", $date)->format("Y-m-d") : "1999-01-01";
            $processing_file->save();
        } else {
            $this->fileObject->seek($processing_file->row_number);
        }

        $processing_file->processing_counter++;

        // Reset counter
        Counter::init();
        Counter::set($processing_file->row_number);

        EntryCounter::init($processing_file->id);

        while (!$this->fileObject->eof()) {
            $s = preg_replace("/[^A-Za-z0-9\.\,\(\)\-\n\=\*\#\/ \:]*/", '', $this->fileObject->current());
            Hook::trigger("subscription", $s);
            Counter::inc();
            $this->fileObject->next();
        }

        //fclose($file_handler);
        $this->fileObject = null;

        $difference = Counter::get() - $processing_file->row_number;

        $this->out("#");
        $this->out("# Status: " . (( $difference > 0) ? $difference . " lines processed!" : "Not modified!"));
        $this->out("#");
        $this->out("####################\n");

        if (Counter::get()) {
            $processing_file->row_number = Counter::get();
            $processing_file->processing_endtime = date("Y-m-d H:i:s");
            $processing_file->save();
        }


        EntryCounter::reset();

        DB::commitTransaction();

        if ($this->debug) {
            // Processed file move to warehouse folder
            if (!rename($this->file, str_replace("{$this->processingDir}/", "{$this->queueDir}/", $this->file)))
                $this->error("Unable to move file {$this->file}");
        }
        else {
            // Processed file move to warehouse folder
            if (!rename($this->file, str_replace("{$this->processingDir}/", "{$this->warehouseDir}/", $this->file)))
                $this->error("Unable to move file {$this->file}");
        }

        $this->file = null;
    }
}

function runApp($dont_use_client_logic = false)
{
    if ($dont_use_client_logic) {
     
        $worker = new Worker();
        $worker->run();
    } else {
        $companyBranches = CompanyBranch::getAll();
        foreach (CompanyBranch::getAll() AS $value) {
            $worker = new Worker();
            //print_r($value);
            $worker->run($value);
        }
        if(empty($companyBranches)){
            echo "\n\n#########################################\n\n\n";
            echo "\tNo Any Active Branch Exists\n\n\n";
            echo "#########################################\n\n\n";
        }
    }
}
runApp($do_not_use_client_logic);
